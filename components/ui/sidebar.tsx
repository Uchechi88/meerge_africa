"use client";
import React, { useState, useEffect, useContext } from "react";
import { SidebarIcon, X } from "lucide-react";
import { usePathname } from "next/navigation";
import Link from "next/link";
import { useIsMobile } from "@/lib/hooks/mobile";
import { cn } from "@/lib/utils";
import Image from "next/image";
import { RestaurantContext } from "@/lib/contexts/restaurant";

type SVGProps = React.SVGProps<SVGSVGElement>;

const DashboardIcon: React.FC<SVGProps> = (props) => {
  return (
    <svg
      width="26"
      height="26"
      viewBox="0 0 26 26"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M9.01998 0H2.76792C1.38675 0 0.26709 1.11966 0.26709 2.50083V11.2537C0.26709 12.6349 1.38675 13.7546 2.76792 13.7546H9.01998C10.4012 13.7546 11.5208 12.6349 11.5208 11.2537V2.50083C11.5208 1.11966 10.4012 0 9.01998 0Z"
        fill="white"
      />
      <path
        d="M22.7663 0H16.5143C15.1331 0 14.0134 1.11966 14.0134 2.50083V6.25207C14.0134 7.63324 15.1331 8.7529 16.5143 8.7529H22.7663C24.1475 8.7529 25.2671 7.63324 25.2671 6.25207V2.50083C25.2671 1.11966 24.1475 0 22.7663 0Z"
        fill="white"
      />
      <path
        d="M9.01998 16.2559H2.76792C1.38675 16.2559 0.26709 17.3755 0.26709 18.7567V22.5079C0.26709 23.8891 1.38675 25.0088 2.76792 25.0088H9.01998C10.4012 25.0088 11.5208 23.8891 11.5208 22.5079V18.7567C11.5208 17.3755 10.4012 16.2559 9.01998 16.2559Z"
        fill="white"
      />
      <path
        d="M22.7663 11.2559H16.5143C15.1331 11.2559 14.0134 12.3755 14.0134 13.7567V22.5096C14.0134 23.8908 15.1331 25.0104 16.5143 25.0104H22.7663C24.1475 25.0104 25.2671 23.8908 25.2671 22.5096V13.7567C25.2671 12.3755 24.1475 11.2559 22.7663 11.2559Z"
        fill="white"
      />
    </svg>
  );
};

const OrdersIcon: React.FC<SVGProps> = (props) => {
  return (
    <svg
      width="26"
      height="26"
      viewBox="0 0 26 26"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        opacity="0.5"
        d="M9.99708 0.0107422C8.65819 0.0107422 7.57275 1.09617 7.57275 2.43513C7.57275 3.77408 8.65819 4.85951 9.99708 4.85951H15.5385C16.8775 4.85951 17.9629 3.77408 17.9629 2.43513C17.9629 1.09617 16.8775 0.0107422 15.5385 0.0107422H9.99708Z"
        fill="white"
      />
      <path
        opacity="0.5"
        d="M1.4955 19.69C0.306932 14.9357 -0.287347 12.5585 0.960629 10.9602C2.20861 9.36182 4.65891 9.36182 9.55949 9.36182H15.9746C20.8753 9.36182 23.3256 9.36182 24.5736 10.9602C25.8215 12.5585 25.2273 14.9357 24.0387 19.69C23.2827 22.7138 22.9047 24.2256 21.7773 25.1059C20.6499 25.9862 19.0915 25.9862 15.9746 25.9862H9.55949C6.44263 25.9862 4.8842 25.9862 3.75682 25.1059C2.62942 24.2256 2.25145 22.7138 1.4955 19.69Z"
        fill="white"
      />
      <path
        d="M17.728 3.47747C17.8786 3.16175 17.9628 2.80834 17.9628 2.43525C17.9628 2.0639 17.8794 1.71205 17.7302 1.39746C18.6771 1.40435 19.4151 1.44781 20.074 1.70529C20.8612 2.01294 21.5458 2.53591 22.0497 3.21441C22.558 3.89889 22.7967 4.77622 23.125 5.98377L23.1893 6.2198L23.8995 10.3246C23.3335 9.93402 22.6034 9.70193 21.659 9.56402L21.1585 6.67137C20.7654 5.23099 20.6227 4.77834 20.3813 4.45336C20.11 4.08803 19.7414 3.80643 19.3175 3.64076C19.013 3.52175 18.645 3.48674 17.728 3.47747Z"
        fill="white"
      />
      <path
        d="M7.80544 1.39746C7.65621 1.71206 7.57273 2.0639 7.57273 2.43525C7.57273 2.80834 7.657 3.16175 7.80755 3.47747C6.89065 3.48674 6.52272 3.52175 6.21822 3.64076C5.79437 3.80643 5.42571 4.08803 5.15439 4.45336C4.91304 4.77834 4.77035 5.23099 4.37721 6.67137L3.87668 9.5639C2.9325 9.70173 2.20241 9.93366 1.63623 10.324L2.34642 6.2198L2.41069 5.98379C2.73913 4.77624 2.97775 3.89889 3.48608 3.21441C3.98996 2.53591 4.67462 2.01294 5.46177 1.70529C6.12055 1.44782 6.85856 1.40435 7.80544 1.39746Z"
        fill="white"
      />
    </svg>
  );
};

const MenuIcon: React.FC<SVGProps> = (props) => {
  return (
    <svg
      width="40"
      height="26"
      viewBox="0 0 40 26"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M5.60181 3.21411C5.20272 3.21411 4.8799 3.53532 4.8799 3.9328V8.23957C4.8799 8.82183 4.44643 9.3074 3.88404 9.38905V4.17505C3.88404 3.78025 3.56069 3.45636 3.16159 3.45636C2.76196 3.45636 2.43914 3.78025 2.43914 4.17505V9.38905C1.87891 9.3074 1.44329 8.82183 1.44329 8.23957V3.9328C1.44329 3.53532 1.12047 3.21411 0.721913 3.21411C0.324431 3.21411 0 3.53532 0 3.9328V8.23957C0 9.61626 1.08072 10.7475 2.44022 10.8366V22.5188C2.44022 22.9185 2.76304 23.2397 3.16267 23.2397C3.56176 23.2397 3.88512 22.9185 3.88512 22.5188V10.8366C5.24515 10.7475 6.32533 9.61572 6.32533 8.23957V3.9328C6.3248 3.53532 6.00251 3.21411 5.60181 3.21411Z"
        fill="#7E88A1"
      />
      <path
        d="M36.4931 3.19531C35.2421 3.19531 35.3361 5.70321 35.3361 8.79551C35.3361 10.8372 35.2953 12.6232 35.6272 13.6018V22.5188C35.6272 22.9185 35.95 23.2397 36.3491 23.2397C36.7493 23.2397 37.0721 22.9185 37.0721 22.5188V14.2399C38.2312 13.6491 39.5343 11.4366 39.5343 8.79551C39.5338 5.70321 37.7457 3.19531 36.4931 3.19531Z"
        fill="#7E88A1"
      />
      <path
        d="M20.5025 0.986084C13.5767 0.986084 7.95874 6.58252 7.95874 13.4864C7.95874 20.3902 13.5767 25.9861 20.5025 25.9861C27.4321 25.9861 33.0495 20.3902 33.0495 13.4864C33.0495 6.58252 27.4321 0.986084 20.5025 0.986084Z"
        fill="#7E88A1"
      />
      <ellipse
        cx="20.5332"
        cy="13.5135"
        rx="9.95773"
        ry="9.90831"
        fill="#EDEDED"
      />
    </svg>
  );
};

const WorkboardIcon: React.FC<SVGProps> = (props) => {
  return (
    <svg
      width="26"
      height="26"
      viewBox="0 0 26 26"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        opacity="0.5"
        d="M0.26709 10.9861C0.26709 6.27203 0.26709 3.91502 1.73155 2.45055C3.19603 0.986084 5.55304 0.986084 10.2671 0.986084H12.7671C17.4811 0.986084 19.8382 0.986084 21.3026 2.45055C22.7671 3.91502 22.7671 6.27203 22.7671 10.9861V15.9861C22.7671 20.7001 22.7671 23.0572 21.3026 24.5216C19.8382 25.9861 17.4811 25.9861 12.7671 25.9861H10.2671C5.55304 25.9861 3.19603 25.9861 1.73155 24.5216C0.26709 23.0572 0.26709 20.7001 0.26709 15.9861V10.9861Z"
        fill="#D9D9D9"
      />
      <path
        d="M17.1657 19.1128C17.3845 18.9422 17.5829 18.7438 17.9797 18.3469L22.9265 13.4002C23.046 13.2807 22.9912 13.0747 22.8315 13.0192C22.2476 12.8167 21.488 12.4363 20.7775 11.7258C20.067 11.0153 19.6866 10.2557 19.4841 9.6718C19.4286 9.51201 19.2226 9.45728 19.1031 9.57686L14.1564 14.5236C13.7595 14.9204 13.5611 15.1188 13.3905 15.3376C13.1892 15.5957 13.0166 15.8748 12.8759 16.1703C12.7565 16.4207 12.6677 16.6869 12.4904 17.2193L12.261 17.9072L11.8964 19.0009L11.5545 20.0266C11.4672 20.2886 11.5354 20.5773 11.7306 20.7727C11.926 20.9679 12.2147 21.0361 12.4767 20.9488L13.5024 20.6069L14.5961 20.2423L15.284 20.0129C15.8162 19.8356 16.0826 19.7468 16.333 19.6274C16.6285 19.4867 16.9076 19.3141 17.1657 19.1128Z"
        fill="#D9D9D9"
      />
      <path
        d="M24.4752 11.8513C25.5311 10.7955 25.5311 9.08373 24.4752 8.02793C23.4195 6.97213 21.7077 6.97213 20.6519 8.02793L20.4929 8.18697C20.3394 8.34043 20.2699 8.55478 20.3082 8.76841C20.3324 8.90278 20.377 9.09925 20.4584 9.33367C20.621 9.80251 20.9281 10.4179 21.5067 10.9965C22.0852 11.5751 22.7007 11.8822 23.1695 12.0448C23.404 12.1262 23.6004 12.1708 23.7347 12.195C23.9484 12.2333 24.1627 12.1638 24.3162 12.0103L24.4752 11.8513Z"
        fill="#D9D9D9"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M5.57959 9.73608C5.57959 9.21832 5.99933 8.79858 6.51709 8.79858H14.6421C15.1598 8.79858 15.5796 9.21832 15.5796 9.73608C15.5796 10.2538 15.1598 10.6736 14.6421 10.6736H6.51709C5.99933 10.6736 5.57959 10.2538 5.57959 9.73608ZM5.57959 14.7361C5.57959 14.2183 5.99933 13.7986 6.51709 13.7986H10.2671C10.7848 13.7986 11.2046 14.2183 11.2046 14.7361C11.2046 15.2538 10.7848 15.6736 10.2671 15.6736H6.51709C5.99933 15.6736 5.57959 15.2538 5.57959 14.7361ZM5.57959 19.7361C5.57959 19.2183 5.99933 18.7986 6.51709 18.7986H8.39209C8.90985 18.7986 9.32959 19.2183 9.32959 19.7361C9.32959 20.2538 8.90985 20.6736 8.39209 20.6736H6.51709C5.99933 20.6736 5.57959 20.2538 5.57959 19.7361Z"
        fill="#D9D9D9"
      />
    </svg>
  );
};

const InventoryIcon: React.FC<SVGProps> = (props) => {
  return (
    <svg
      width="26"
      height="25"
      viewBox="0 0 26 25"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M11.6044 0.986084H13.93C17.2188 0.986084 18.8633 0.986084 19.885 2.0078C20.9068 3.02953 20.9068 4.67396 20.9068 7.96283V17.2652C20.9068 20.554 20.9068 22.1984 19.885 23.2202C18.8633 24.2419 17.2188 24.2419 13.93 24.2419H11.6044C8.31556 24.2419 6.67113 24.2419 5.64941 23.2202C4.62769 22.1984 4.62769 20.554 4.62769 17.2652V7.96283C4.62769 4.67396 4.62769 3.02953 5.64941 2.0078C6.67113 0.986084 8.31556 0.986084 11.6044 0.986084ZM8.40676 13.7768C8.40676 13.2952 8.79721 12.9047 9.27885 12.9047H16.2556C16.7372 12.9047 17.1277 13.2952 17.1277 13.7768C17.1277 14.2584 16.7372 14.6489 16.2556 14.6489H9.27885C8.79721 14.6489 8.40676 14.2584 8.40676 13.7768ZM8.40676 9.12562C8.40676 8.64398 8.79721 8.25353 9.27885 8.25353H16.2556C16.7372 8.25353 17.1277 8.64398 17.1277 9.12562C17.1277 9.60726 16.7372 9.99771 16.2556 9.99771H9.27885C8.79721 9.99771 8.40676 9.60726 8.40676 9.12562ZM8.40676 18.4279C8.40676 17.9463 8.79721 17.5559 9.27885 17.5559H12.7672C13.2488 17.5559 13.6393 17.9463 13.6393 18.4279C13.6393 18.9096 13.2488 19.3 12.7672 19.3H9.27885C8.79721 19.3 8.40676 18.9096 8.40676 18.4279Z"
        fill="white"
      />
      <g opacity="0.5">
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M1.13918 3.60254C1.62082 3.60254 2.01128 3.99299 2.01128 4.47463V20.7537C2.01128 21.2353 1.62082 21.6258 1.13918 21.6258C0.657543 21.6258 0.26709 21.2353 0.26709 20.7537V4.47463C0.26709 3.99299 0.657543 3.60254 1.13918 3.60254Z"
          fill="white"
        />
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M24.395 3.60254C24.8767 3.60254 25.2671 3.99299 25.2671 4.47463V20.7537C25.2671 21.2353 24.8767 21.6258 24.395 21.6258C23.9134 21.6258 23.5229 21.2353 23.5229 20.7537V4.47463C23.5229 3.99299 23.9134 3.60254 24.395 3.60254Z"
          fill="white"
        />
      </g>
    </svg>
  );
};

const PaymentIcon: React.FC<SVGProps> = (props) => {
  return (
    <svg
      width="26"
      height="22"
      viewBox="0 0 26 22"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M4.3743 6.2063C3.8812 6.2063 3.48145 6.60605 3.48145 7.09916C3.48145 7.59226 3.8812 7.99201 4.3743 7.99201H9.13621C9.6293 7.99201 10.0291 7.59226 10.0291 7.09916C10.0291 6.60605 9.6293 6.2063 9.13621 6.2063H4.3743Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M23.1104 6.19883C23.0363 6.19428 22.9556 6.19432 22.8719 6.19434L22.8511 6.19435H19.5705C16.8664 6.19435 14.5527 8.26109 14.5527 10.9562C14.5527 13.6514 16.8664 15.7181 19.5705 15.7181H22.8511H22.8719C22.9556 15.7181 23.0363 15.7181 23.1104 15.7136C24.2087 15.6464 25.1801 14.8117 25.2618 13.646C25.2671 13.5696 25.267 13.4872 25.267 13.4109V13.3901V8.52239V8.50166C25.267 8.42529 25.2671 8.3429 25.2618 8.26646C25.1801 7.10076 24.2087 6.26617 23.1104 6.19883ZM19.2796 12.2261C19.9758 12.2261 20.5401 11.6576 20.5401 10.9562C20.5401 10.2549 19.9758 9.68636 19.2796 9.68636C18.5834 9.68636 18.0192 10.2549 18.0192 10.9562C18.0192 11.6576 18.5834 12.2261 19.2796 12.2261Z"
        fill="white"
      />
      <path
        opacity="0.5"
        d="M23.0521 6.19613C23.0521 4.79065 23.001 3.28298 22.1026 2.20216C22.0158 2.09782 21.9235 1.99652 21.8252 1.89818C20.9342 1.00728 19.8045 0.611896 18.4088 0.424253C17.0526 0.241908 15.3197 0.241932 13.1319 0.241944H10.6166C8.42879 0.241932 6.69589 0.241908 5.33969 0.424253C3.94395 0.611896 2.81424 1.00728 1.92333 1.89818C1.03242 2.7891 0.637042 3.9188 0.4494 5.31454C0.267054 6.67074 0.267078 8.40362 0.26709 10.5915V10.7258C0.267078 12.9136 0.267054 14.6465 0.4494 16.0027C0.637042 17.3984 1.03242 18.5281 1.92333 19.4191C2.81424 20.3099 3.94395 20.7053 5.33969 20.893C6.69588 21.0753 8.42876 21.0753 10.6165 21.0753H13.1319C15.3197 21.0753 17.0526 21.0753 18.4088 20.893C19.8045 20.7053 20.9342 20.3099 21.8252 19.4191C22.0686 19.1755 22.2754 18.9139 22.4511 18.6331C22.9874 17.7766 23.0521 16.7268 23.0521 15.7163C22.9947 15.7181 22.9342 15.7181 22.8721 15.7181H19.5705C16.8665 15.7181 14.5528 13.6513 14.5528 10.9562C14.5528 8.26108 16.8665 6.19434 19.5705 6.19434H22.872C22.9341 6.19431 22.9947 6.19429 23.0521 6.19613Z"
        fill="white"
      />
    </svg>
  );
};

const QuickMarketIcon: React.FC<SVGProps> = (props) => {
  return (
    <svg
      width="26"
      height="25"
      viewBox="0 0 26 25"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M1.5815 0.131329C1.06733 -0.0494459 0.503984 0.220828 0.323223 0.73498C0.142449 1.24915 0.412722 1.8125 0.926875 1.99326L1.27057 2.1141C2.14899 2.42294 2.72629 2.62761 3.15109 2.83604C3.55006 3.0318 3.72594 3.19026 3.84181 3.35981C3.96057 3.53361 4.05228 3.77232 4.10403 4.2504C4.15818 4.75068 4.15953 5.40226 4.15953 6.37587V9.7991H24.8491C25.2839 7.61813 25.488 6.51021 24.9177 5.76898C24.3337 5.00967 22.3379 5.00967 20.1209 5.00967H6.12337C6.11457 4.65398 6.09789 4.33038 6.06623 4.03801C5.99553 3.38489 5.84236 2.78921 5.47134 2.24627C5.09742 1.69909 4.60026 1.34865 4.02049 1.06417C3.47827 0.798125 2.78929 0.555917 1.97807 0.270748L1.5815 0.131329Z"
        fill="white"
      />
      <path
        opacity="0.5"
        d="M24.1603 13.1508L24.8179 9.96034L24.8502 9.79883H4.16064C4.16064 13.6693 4.24385 14.9466 5.38384 16.149C6.52383 17.3514 8.35861 17.3514 12.0282 17.3514H19.0056C21.0596 17.3514 22.0865 17.3514 22.8124 16.7598C23.5385 16.1682 23.7457 15.1623 24.1603 13.1508Z"
        fill="white"
      />
      <path
        d="M7.44998 20.7991C8.54001 20.7991 9.42365 21.6827 9.42365 22.7727C9.42365 23.8627 8.54001 24.7464 7.44998 24.7464C6.35995 24.7464 5.47632 23.8627 5.47632 22.7727C5.47632 21.6827 6.35995 20.7991 7.44998 20.7991Z"
        fill="white"
      />
      <path
        d="M19.292 20.7991C20.382 20.7991 21.2657 21.6826 21.2657 22.7727C21.2657 23.8627 20.382 24.7464 19.292 24.7464C18.202 24.7464 17.3184 23.8627 17.3184 22.7727C17.3184 21.6826 18.202 20.7991 19.292 20.7991Z"
        fill="white"
      />
    </svg>
  );
};

const AnalyticsIcon: React.FC<SVGProps> = (props) => {
  return (
    <svg
      width="26"
      height="29"
      viewBox="0 0 26 29"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M15.3832 26.5605V3.88612C15.3832 2.86987 15.3813 2.21297 15.3271 1.72895C15.2762 1.27503 15.1941 1.13276 15.1277 1.0531C15.0613 0.973438 14.9428 0.874912 14.5646 0.81388C14.1612 0.748801 13.6138 0.746582 12.7669 0.746582C11.9201 0.746582 11.3726 0.748801 10.9692 0.81388C10.591 0.874912 10.4724 0.973438 10.4061 1.0531C10.3397 1.13276 10.2576 1.27503 10.2067 1.72895C10.1525 2.21297 10.1506 2.86987 10.1506 3.88612V26.5605H15.3832Z"
        fill="#8690A9"
      />
      <path
        opacity="0.7"
        d="M8.40663 10.1652C8.40663 9.5872 8.01618 9.11865 7.53454 9.11865H4.04617C3.56453 9.11865 3.17407 9.5872 3.17407 10.1652V26.5605H8.40663V10.1652Z"
        fill="#8690A9"
      />
      <path
        opacity="0.7"
        d="M22.3602 17.142C22.3602 16.564 21.9698 16.0955 21.4882 16.0955H17.9998C17.5182 16.0955 17.1277 16.564 17.1277 17.142V26.5606H22.3602V17.142Z"
        fill="#8690A9"
      />
      <path
        opacity="0.5"
        d="M1.13918 26.5605C0.657543 26.5605 0.26709 27.0291 0.26709 27.6071C0.26709 28.185 0.657543 28.6536 1.13918 28.6536H24.395C24.8766 28.6536 25.2671 28.185 25.2671 27.6071C25.2671 27.0291 24.8766 26.5605 24.395 26.5605H24.1043H22.3601H17.1276H15.3834H10.1508H8.40662H3.17407H1.42988H1.13918Z"
        fill="white"
      />
      <path
        opacity="0.5"
        d="M1.13918 26.5605C0.657543 26.5605 0.26709 27.0291 0.26709 27.6071C0.26709 28.185 0.657543 28.6536 1.13918 28.6536H24.395C24.8766 28.6536 25.2671 28.185 25.2671 27.6071C25.2671 27.0291 24.8766 26.5605 24.395 26.5605H24.1043H22.3601H17.1276H15.3834H10.1508H8.40662H3.17407H1.42988H1.13918Z"
        fill="white"
      />
      <path
        opacity="0.5"
        d="M1.13918 26.5605C0.657543 26.5605 0.26709 27.0291 0.26709 27.6071C0.26709 28.185 0.657543 28.6536 1.13918 28.6536H24.395C24.8766 28.6536 25.2671 28.185 25.2671 27.6071C25.2671 27.0291 24.8766 26.5605 24.395 26.5605H24.1043H22.3601H17.1276H15.3834H10.1508H8.40662H3.17407H1.42988H1.13918Z"
        fill="white"
      />
      <path
        opacity="0.5"
        d="M1.13918 26.5605C0.657543 26.5605 0.26709 27.0291 0.26709 27.6071C0.26709 28.185 0.657543 28.6536 1.13918 28.6536H24.395C24.8766 28.6536 25.2671 28.185 25.2671 27.6071C25.2671 27.0291 24.8766 26.5605 24.395 26.5605H24.1043H22.3601H17.1276H15.3834H10.1508H8.40662H3.17407H1.42988H1.13918Z"
        fill="white"
      />
    </svg>
  );
};

const SettingsIcon: React.FC<SVGProps> = (props) => {
  return (
    <svg
      width="26"
      height="27"
      viewBox="0 0 26 27"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        opacity="0.5"
        fillRule="evenodd"
        clipRule="evenodd"
        d="M15.1076 0.85388C14.6204 0.653565 14.0026 0.653564 12.7671 0.653564C11.5315 0.653564 10.9138 0.653565 10.4265 0.85388C9.77681 1.12097 9.26062 1.63327 8.9915 2.27808C8.86864 2.57243 8.82057 2.91475 8.80175 3.41407C8.7741 4.14788 8.39492 4.8271 7.75415 5.19426C7.11337 5.5614 6.33108 5.54769 5.67694 5.20456C5.23179 4.97106 4.90904 4.84122 4.59075 4.79964C3.89352 4.70853 3.18837 4.89605 2.63045 5.32093C2.21201 5.63959 1.90312 6.17053 1.28538 7.23241C0.667626 8.29431 0.358758 8.82524 0.289916 9.34423C0.198113 10.0362 0.38706 10.736 0.815178 11.2897C1.01059 11.5425 1.2852 11.7549 1.71143 12.0207C2.33802 12.4114 2.74119 13.0771 2.74115 13.8114C2.74111 14.5458 2.33795 15.2113 1.71143 15.602C1.28514 15.8679 1.01047 16.0804 0.815047 16.3332C0.386929 16.8868 0.197995 17.5866 0.289784 18.2785C0.358626 18.7975 0.667507 19.3285 1.28524 20.3904C1.90299 21.4522 2.21187 21.9833 2.63032 22.3018C3.18824 22.7267 3.89339 22.9142 4.59062 22.8231C4.9089 22.7816 5.23162 22.6517 5.67673 22.4183C6.33092 22.0751 7.11326 22.0614 7.75408 22.4285C8.39489 22.7958 8.77409 23.475 8.80175 24.2089C8.82057 24.7081 8.86864 25.0505 8.9915 25.3449C9.26062 25.9896 9.77681 26.502 10.4265 26.7691C10.9138 26.9693 11.5315 26.9693 12.7671 26.9693C14.0026 26.9693 14.6204 26.9693 15.1076 26.7691C15.7573 26.502 16.2735 25.9896 16.5426 25.3449C16.6655 25.0505 16.7136 24.7081 16.7325 24.2088C16.7601 23.475 17.1392 22.7958 17.78 22.4285C18.4208 22.0613 19.2031 22.0751 19.8573 22.4183C20.3025 22.6517 20.6251 22.7814 20.9434 22.823C21.6406 22.9142 22.3457 22.7267 22.9036 22.3018C23.3222 21.9831 23.631 21.4522 24.2488 20.3903C24.8665 19.3284 25.1754 18.7975 25.2443 18.2785C25.336 17.5866 25.1471 16.8867 24.719 16.333C24.5235 16.0803 24.2489 15.8678 23.8226 15.602C23.1961 15.2113 22.793 14.5457 22.793 13.8113C22.793 13.077 23.1961 12.4116 23.8226 12.0209C24.249 11.755 24.5236 11.5426 24.7192 11.2897C25.1472 10.7361 25.3361 10.0363 25.2444 9.34431C25.1755 8.82533 24.8667 8.29438 24.2489 7.2325C23.6311 6.17062 23.3223 5.63968 22.9038 5.32102C22.3459 4.89614 21.6407 4.70863 20.9435 4.79973C20.6252 4.84131 20.3025 4.97114 19.8575 5.20461C19.2033 5.54776 18.4209 5.56148 17.7801 5.1943C17.1393 4.82713 16.7601 4.14785 16.7323 3.41401C16.7135 2.91472 16.6655 2.57242 16.5426 2.27808C16.2735 1.63327 15.7573 1.12097 15.1076 0.85388Z"
        fill="white"
      />
      <path
        d="M16.7448 13.8099C16.7448 15.99 14.9642 17.7573 12.7675 17.7573C10.5708 17.7573 8.79004 15.99 8.79004 13.8099C8.79004 11.6298 10.5708 9.86255 12.7675 9.86255C14.9642 9.86255 16.7448 11.6298 16.7448 13.8099Z"
        fill="white"
      />
    </svg>
  );
};

const sidebarItems = [
  {
    icon: DashboardIcon,
    label: "Dashboard",
    path: "/restaurant/{slug}",
  },
  {
    icon: OrdersIcon,
    label: "Orders",
    path: "/restaurant/{slug}/orders",
  },
  {
    icon: MenuIcon,
    label: "Menu",
    path: "/restaurant/{slug}/menu",
  },
  {
    icon: WorkboardIcon,
    label: "Workboard",
    path: "/restaurant/{slug}/workboard",
  },
  {
    icon: InventoryIcon,
    label: "Inventory",
    path: "/restaurant/{slug}/inventory",
  },
  {
    icon: PaymentIcon,
    label: "Payment",
    path: "/restaurant/{slug}/payment",
  },
  {
    icon: QuickMarketIcon,
    label: "Quick-Market",
    path: "/restaurant/{slug}/market",
  },
  {
    icon: AnalyticsIcon,
    label: "Analytics",
    path: "/restaurant/{slug}/analytics",
  },
  {
    icon: SettingsIcon,
    label: "Settings",
    path: "/restaurant/{slug}/settings",
  },
];

type SidebarItemProps = {
  icon: React.FC<SVGProps>;
  label: string;
  path: string;
  isCollapsed: boolean;
};

// Individual sidebar item component
const SidebarItem = ({
  icon: Icon,
  label,
  path,
  isCollapsed,
}: SidebarItemProps) => {
  const pathname = usePathname();
  const isActive = pathname === path;

  return (
    <Link
      href={path}
      className={`
        flex items-center gap-4 p-4 border-white transition-colors
        ${
          isActive
            ? "bg-white/25 border-r-4"
            : "hover:bg-white/25 hover:border-r-4"
        }
        ${isCollapsed ? "justify-center" : ""}
      `}
    >
      <Icon className="w-6 h-6" />
      {!isCollapsed && <span className="text-white font-medium">{label}</span>}
    </Link>
  );
};

// Main sidebar component
const Sidebar = () => {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const isMobile = useIsMobile();
  const [isOpen, setIsOpen] = useState(false);
  const restaurant = useContext(RestaurantContext);

  useEffect(() => {
    if (!isMobile) {
      setIsOpen(true);
    } else {
      setIsOpen(false);
      setIsCollapsed(false);
    }
  }, [isMobile]);

  // Toggle handlers
  const toggleCollapse = () => {
    if (!isMobile) {
      setIsCollapsed(!isCollapsed);
    }
  };

  const toggleMobileMenu = () => {
    if (isMobile) {
      setIsOpen(!isOpen);
    }
  };

  const SidebarOpenButton = () => {
    return (
      <button
        onClick={toggleMobileMenu}
        className={cn(
          "fixed z-50 top-4 left-4 p-2 bg-white rounded-lg shadow-lg md:hidden",
          "transform transition-transform duration-300 ease-in-out",
          isOpen ? "-translate-x-full" : "translate-x-0" // Changed to slide left
        )}
      >
        <SidebarIcon size={24} />
      </button>
    );
  };

  const SidebarCloseButton = () => {
    return (
      <button
        onClick={toggleMobileMenu}
        className={cn(
          "fixed z-50 top-4 right-4 p-2 bg-white rounded-lg shadow-lg md:hidden",
          "transform transition-transform duration-300 ease-in-out",
          isOpen ? "translate-x-0" : "translate-x-full" // Slides from/to right
        )}
      >
        <X size={24} />
      </button>
    );
  };

  const SidebarExpandCollapseButton = () => {
    return (
      <button
        onClick={toggleCollapse}
        className={cn(
          "fixed z-50 top-4 p-2 bg-white text-black rounded-lg shadow-lg",
          "transform transition-transform ease-in-out duration-300",
          isCollapsed ? "left-[5.5rem]" : "left-[16.5rem]"
        )}
      >
        <SidebarIcon size={24} />
      </button>
    );
  };

  return (
    <>
      {/* Mobile Toggle Button */}
      {isMobile ? (
        isOpen ? (
          <SidebarCloseButton />
        ) : (
          <SidebarOpenButton />
        )
      ) : (
        <SidebarExpandCollapseButton />
      )}

      {/* Sidebar Container */}
      <aside
        className={cn(
          "scrollbar-none flex flex-col flex-shrink-0 overflow-y-auto transition-all duration-300 ease-in-out",
          isMobile
            ? "fixed top-0 left-0 h-full z-40 bg-primary shadow-xl transition-all duration-300"
            : "sticky top-0 z-40 h-screen bg-primary shadow-lg",
          isMobile && !isOpen ? "-translate-x-full" : "translate-x-0",
          isCollapsed ? "w-20" : "w-64"
        )}
      >
        {/* Logo Section */}
        <div className="p-4">
          <div
            className={cn(
              "flex place-content-center gap-4",
              "transition-all duration-300 ease-in-out"
            )}
          >
            <Image
              src="/images/logo.png"
              alt="Logo"
              width={70}
              height={40}
              className={cn(
                "h-auto rounded-lg p-1 bg-white",
                "transition-all duration-300 ease-in-out",
                isCollapsed ? "scale-90" : "scale-100"
              )}
            />
            {!isCollapsed && (
              <span className="text-2xl text-white font-bold transition-opacity duration-300">
                Meerge
              </span>
            )}
          </div>
        </div>
        {/* Navigation Items */}
        <nav className="flex-1 py-4 mt-4">
          <div className="flex flex-col gap-2">
            {sidebarItems.map((item, index) => (
              <SidebarItem
                key={index}
                icon={item.icon}
                label={item.label}
                path={item.path
                  .replace("{slug}", restaurant.slug)
                  .replace("{id}", restaurant.id.toString())}
                isCollapsed={isCollapsed}
              />
            ))}
          </div>
        </nav>
      </aside>
      {/* Mobile Overlay */}
      {isMobile && isOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-30"
          onClick={toggleMobileMenu}
        />
      )}
    </>
  );
};

export default Sidebar;
